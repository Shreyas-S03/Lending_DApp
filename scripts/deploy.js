const fs = require('fs');
const path = require('path');
const { ethers } = require("hardhat");

// Function to update contract addresses in the frontend config
async function updateFrontendConfig(addresses) {
  try {
    const configPath = path.join(__dirname, '..', 'frontend', 'src', 'contract-config.js');
    
    // Create basic config if it doesn't exist
    if (!fs.existsSync(configPath)) {
      const configContent = `// Auto-generated by deploy script
export const CONTRACT_ADDRESSES = {
  LENDING_POOL: "${addresses.LENDING_POOL}",
  MOCK_PRICE_ORACLE: "${addresses.MOCK_PRICE_ORACLE}",
  PRICE_ORACLE: "${addresses.MOCK_PRICE_ORACLE}",
  MOCK_DAI: "${addresses.MOCK_DAI}",
  BORROWING_POOL: "${addresses.BORROWING_POOL}"
};
`;
      fs.writeFileSync(configPath, configContent);
      console.log(`Created new contract-config.js at ${configPath}`);
      return;
    }
    
    // Update existing config
    let configContent = fs.readFileSync(configPath, 'utf8');
    
    // Replace the address values
    configContent = configContent.replace(
      /(LENDING_POOL:\s*)"[^"]*"/,
      `$1"${addresses.LENDING_POOL}"`
    );
    configContent = configContent.replace(
      /(MOCK_PRICE_ORACLE:\s*)"[^"]*"/,
      `$1"${addresses.MOCK_PRICE_ORACLE}"`
    );
    configContent = configContent.replace(
      /(PRICE_ORACLE:\s*)"[^"]*"/,
      `$1"${addresses.MOCK_PRICE_ORACLE}"`
    );
    configContent = configContent.replace(
      /(MOCK_DAI:\s*)"[^"]*"/,
      `$1"${addresses.MOCK_DAI}"`
    );
    configContent = configContent.replace(
      /(BORROWING_POOL:\s*)"[^"]*"/,
      `$1"${addresses.BORROWING_POOL}"`
    );
    
    fs.writeFileSync(configPath, configContent);
    console.log(`Updated contract addresses in ${configPath}`);
  } catch (error) {
    console.error("Error updating frontend config:", error);
  }
}

async function main() {
  console.log("Deploying contracts...");
  
  // Deploy LendingPool contract
  const LendingPool = await ethers.getContractFactory("LendingPool");
  const lendingPool = await LendingPool.deploy();
  await lendingPool.waitForDeployment();
  console.log("LendingPool deployed to:", lendingPool.target);
  
  // Set a higher interest rate (5% APR = 500 basis points)
  await lendingPool.setInterestRate(500);
  console.log("LendingPool interest rate set to 5% APR (500 basis points)");
  
  // Deploy MockPriceOracle with initial ETH price (2000 USD with 18 decimals)
  const initialEthPrice = ethers.parseEther("2000");
  const MockPriceOracle = await ethers.getContractFactory("MockPriceOracle");
  const priceOracle = await MockPriceOracle.deploy(initialEthPrice);
  await priceOracle.waitForDeployment();
  console.log("MockPriceOracle deployed to:", priceOracle.target);
  
  // Deploy MockDAI
  const MockDAI = await ethers.getContractFactory("MockDAI");
  const mockDAI = await MockDAI.deploy();
  await mockDAI.waitForDeployment();
  console.log("MockDAI deployed to:", mockDAI.target);
  
  // Deploy BorrowingPool with addresses of other contracts
  const BorrowingPool = await ethers.getContractFactory("BorrowingPool");
  const borrowingPool = await BorrowingPool.deploy(
    lendingPool.target,
    priceOracle.target,
    mockDAI.target
  );
  await borrowingPool.waitForDeployment();
  console.log("BorrowingPool deployed to:", borrowingPool.target);
  
  // Transfer ownership of MockDAI to BorrowingPool so it can mint/burn tokens
  await mockDAI.transferOwnership(borrowingPool.target);
  console.log("MockDAI ownership transferred to BorrowingPool");
  
  // Log deployment information for frontend configuration
  console.log("\nDeployment summary:");
  console.log("===================");
  console.log(`LENDING_POOL: "${lendingPool.target}",`);
  console.log(`MOCK_PRICE_ORACLE: "${priceOracle.target}",`);
  console.log(`MOCK_DAI: "${mockDAI.target}",`);
  console.log(`BORROWING_POOL: "${borrowingPool.target}"`);
  
  // Update frontend config with new addresses
  const addresses = {
    LENDING_POOL: lendingPool.target,
    MOCK_PRICE_ORACLE: priceOracle.target,
    MOCK_DAI: mockDAI.target,
    BORROWING_POOL: borrowingPool.target
  };
  
  await updateFrontendConfig(addresses);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
